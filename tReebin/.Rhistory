Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_WOE
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
ggplot(data = df_WOE,
aes(x = Bin, y = WOE, fill = colour, colour = colour)) +
geom_bar(stat = "identity")
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour, colour = colour)) +
geom_bar(stat = "identity")
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour, colour = colour)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket") +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue))
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour, colour = colour)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", sum(df_WOE$IV))) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5))
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour, colour = colour)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", sum(df_WOE$IV))) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", sum(df_WOE$IV))) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour)) +
geom_bar(stat = "identity", colour = "black") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", sum(df_WOE$IV))) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
IV_Formatted <- round(sum(df_WOE$IV), 2)
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour)) +
geom_bar(stat = "identity", colour = "black") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", IV_Formatted)) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
binVariable <- f1(sampleDf, target = "TARGET.x", variable = "EXT_SOURCE_1")
binVariable
plot(y, sampleDf)
summary.VariableBinning <- function(variableBinning, data, target = NULL, variable = NULL) {
# TODO: Check inputs.
}
predict.VariableBinning <- function(VariableBinning, data, variable = NULL) {
df <- data.frame(Var = data[[VariableBinning$info$varName]],
Target = data[[VariableBinning$info$targetName]])
if (!is.null(variable)) {
varName <- variable
} else {
varName = VariableBinning$info$varName
}
df <- data.frame(Var = data[[varName]])
df_Binned <- df %>%
mutate(Bin = cut(Var, VariableBinning$cutPoints))
if (VariableBinning$missingBin == "Own") {
levels(df_Binned$Bin) <- c(levels(df_Binned$Bin), "Missing")
df_Binned[is.na(df_Binned$Var),]$Bin <- "Missing"
} else {
df_Binned[is.na(df_Binned$Var), ]$Bin <- VariableBinning$missingBin
}
return(df_Binned$Bin)
}
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
IV_Formatted <- round(sum(df_WOE$IV), 2)
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour)) +
geom_bar(stat = "identity", colour = "black") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", IV_Formatted)) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
binVariable <- function(data, target, variable, missingStrategy = "auto") {
MISSING_SIGNIFICANCE <- 0.05
df <- data.frame(Var = data[[variable]],
Target = data[[target]])
if (any(is.na(df[, 2]))) {
stop("Input data cannot have missing values in the target column.")
}
df_Missing <- df %>%
filter(is.na(Var))
df_NoMissing <- df %>%
filter(!is.na(Var))
nonMissingCuts <- generateCoarseClasses(df_NoMissing, "Target", "Var")
df_Binned <- df_NoMissing %>%
mutate(Bin = cut(Var, nonMissingCuts, right = T))
df_Bin_Summary <- df_Binned %>%
group_by(Bin) %>%
summarise(Mean_Target = mean(Target),
Volume = n())
# Now we need to treat the missing category.
missingTargetRate <- mean(df_NoMissing$Target)
if (missingStrategy == "auto_agressive") {
closestBin <- which.min(abs(missingTargetRate - df_Bin_Summary$Mean_Target))
} else if(missingStrategy == "auto") {
# TODO: Work this out...
closestBin <- which.min(abs(missingTargetRate - df_Bin_Summary$Mean_Target))
}
# Test the missing target vs the bin target rate.
closestBinLabel <- df_Binned %>%
filter(Bin == df_Bin_Summary$Bin[closestBin])
missingTest <- t.test(df_Missing$Target, closestBinLabel$Target)
missingDifferentFromGroup <- (missingTest$p.value <= MISSING_SIGNIFICANCE)
missingBin <- ""
if (missingStrategy %in% c("separate")) {
missingBin = "Own"
} else if (missingDifferentFromGroup) {
missingBin = "Own"
} else {
missingBin <- df_Bin_Summary$Bin[closestBin]
}
outputObject <- list(
cutPoints = nonMissingCuts,
nBins = length(nonMissingCuts) - 1,
missingBin = missingBin,
info = list(
varName = variable,
targetName = target,
variableType = "continuous"
)
)
class(outputObject) <- "VariableBinning"
outputObject
}
predict.VariableBinning <- function(VariableBinning, data) {
df <- data.frame(Var = data[[VariableBinning$info$varName]],
Target = data[[VariableBinning$info$targetName]])
df_Binned <- df %>%
mutate(Bin = cut(Var, VariableBinning$cutPoints))
if (VariableBinning$missingBin == "Own") {
levels(df_Binned$Bin) <- c(levels(df_Binned$Bin), "Missing")
df_Binned[is.na(df_Binned$Var),]$Bin <- "Missing"
} else {
df_Binned[is.na(df_Binned$Var), ]$Bin <- VariableBinning$missingBin
}
print(woeTable(data = df_Binned, target = "Target", variable = "Bin"))
return(df_Binned)
}
woeTable <- function(data, target, variable) {
df <- data.frame(Var = data[[variable]],
Target = data[[target]])
outDf <- df %>%
group_by(Var) %>%
summarise(Good = n() - sum(Target),
Bad = sum(Target)) %>%
mutate(Bad_Rate = Bad / (Bad + Good)) %>%
ungroup() %>%
mutate(WOE = log(Good / Bad) - log(sum(Good)/sum(Bad))) %>%
mutate(IV = (Good/sum(Good) - Bad/sum(Bad)) * WOE)
names(outDf)[1] <- variable
return(outDf)
}
y <- binVariable(sampleDf, target = "TARGET.x", variable = "EXT_SOURCE_1")
y
plot(y, sampleDf)
summary.VariableBinning <- function(variableBinning, data, target = NULL, variable = NULL) {
# TODO: Check inputs.
}
predict.VariableBinning <- function(VariableBinning, data, variable = NULL) {
df <- data.frame(Var = data[[VariableBinning$info$varName]],
Target = data[[VariableBinning$info$targetName]])
if (!is.null(variable)) {
varName <- variable
} else {
varName = VariableBinning$info$varName
}
df <- data.frame(Var = data[[varName]])
df_Binned <- df %>%
mutate(Bin = cut(Var, VariableBinning$cutPoints))
if (VariableBinning$missingBin == "Own") {
levels(df_Binned$Bin) <- c(levels(df_Binned$Bin), "Missing")
df_Binned[is.na(df_Binned$Var),]$Bin <- "Missing"
} else {
df_Binned[is.na(df_Binned$Var), ]$Bin <- VariableBinning$missingBin
}
return(df_Binned$Bin)
}
plot.VariableBinning <- function(variableBinning, data) {
# TODO: Check inputs.
df <- data.frame(Var = data[[variableBinning$info$varName]],
Target = data[[variableBinning$info$targetName]]) %>%
mutate(Bin = predict(variableBinning, ., variable = "Var"))
df_WOE <- woeTable(data = df, target = "Target", variable = "Bin")
df_Plot <- df_WOE %>%
mutate(colour = ifelse(WOE < 0, "Negative", "Positive"))
maxAbsValue <- max(abs(df_WOE$WOE))
IV_Formatted <- round(sum(df_WOE$IV), 2)
ggplot(data = df_Plot,
aes(x = Bin, y = WOE, fill = colour)) +
geom_bar(stat = "identity", colour = "black") +
theme_bw() +
labs(x = variableBinning$info$varName,
y = "Weight of Evidence",
title =  variableBinning$info$varName,
subtitle = "Weight of Evidence by Bucket",
caption = paste0("Information Value: ", IV_Formatted)) +
lims(y = c(- 1.1 * maxAbsValue, 1.1 * maxAbsValue)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.subtitle = element_text(hjust = 0.5)) +
theme(legend.position = "none")
}
plot(y, sampleDf)
devtools::load_all(".")
source('~/Documents/Code/R_Packages/tReebin/tReebin/R/main_functions.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
y <- binVariable(sampleDf, target = "TARGET.x", variable = "EXT_SOURCE_2")
source('~/.active-rstudio-document', echo=TRUE)
y
message("fefe")
source('~/Documents/Code/R_Packages/tReebin/tReebin/R/main_functions.R', echo=TRUE)
y <- binVariable(sampleDf, target = "TARGET.x", variable = "EXT_SOURCE_3")
plot(y, sampleDf)
source('~/.active-rstudio-document', echo=TRUE)
binContinuousVariable <- function(data, target, variable, missingStrategy = "auto") {
MISSING_SIGNIFICANCE <- 0.05
df <- data.frame(Var = data[[variable]],
Target = data[[target]])
if (any(is.na(df[, 2]))) {
stop("Input data cannot have missing values in the target column.")
}
df_Missing <- df %>%
dplyr::filter(is.na(Var))
df_NoMissing <- df %>%
dplyr::filter(!is.na(Var))
nonMissingCuts <- generateCoarseClasses(df_NoMissing, "Target", "Var")
df_Binned <- df_NoMissing %>%
dplyr::mutate(Bin = cut(Var, nonMissingCuts, right = T))
df_Bin_Summary <- df_Binned %>%
dplyr::group_by(Bin) %>%
dplyr::summarise(Mean_Target = mean(Target),
Volume = n())
# Now we need to treat the missing category.
missingTargetRate <- mean(df_NoMissing$Target)
if (missingStrategy == "auto_agressive") {
closestBin <- which.min(abs(missingTargetRate - df_Bin_Summary$Mean_Target))
} else if(missingStrategy == "auto") {
# TODO: Work this out...
closestBin <- which.min(abs(missingTargetRate - df_Bin_Summary$Mean_Target))
}
# Test the missing target vs the bin target rate.
closestBinLabel <- df_Binned %>%
dplyr::filter(Bin == df_Bin_Summary$Bin[closestBin])
missingTest <- t.test(df_Missing$Target, closestBinLabel$Target)
missingDifferentFromGroup <- (missingTest$p.value <= MISSING_SIGNIFICANCE)
missingBin <- ""
if (missingStrategy %in% c("separate")) {
missingBin = "Own"
} else if (missingDifferentFromGroup) {
missingBin = "Own"
} else {
message("Info: The target rate of the missing category is not significantly different to the target rate of the closest category. The missing cateogry has been merged.")
missingBin <- df_Bin_Summary$Bin[closestBin]
}
outputObject <- list(
cutPoints = nonMissingCuts,
nBins = length(nonMissingCuts) - 1,
missingBin = missingBin,
info = list(
varName = variable,
targetName = target,
variableType = "continuous"
)
)
class(outputObject) <- "VariableBinning"
outputObject
}
predict.VariableBinning <- function(VariableBinning, data) {
df <- data.frame(Var = data[[VariableBinning$info$varName]],
Target = data[[VariableBinning$info$targetName]])
df_Binned <- df %>%
dplyr::mutate(Bin = cut(Var, VariableBinning$cutPoints))
if (VariableBinning$missingBin == "Own") {
levels(df_Binned$Bin) <- c(levels(df_Binned$Bin), "Missing")
df_Binned[is.na(df_Binned$Var),]$Bin <- "Missing"
} else {
df_Binned[is.na(df_Binned$Var), ]$Bin <- VariableBinning$missingBin
}
print(woeTable(data = df_Binned, target = "Target", variable = "Bin"))
return(df_Binned)
}
y <- binContinuousVariable(sampleDf, target = "TARGET.x", variable = "EXT_SOURCE_3")
plot(y, sampleDf)
source('~/.active-rstudio-document', echo=TRUE)
str(sampleDf)
ctree(data = sampleDf, formula = Target.x ~ NAME_EDUCATION_TYPE)
sampleDf$TARGET.x
ctree(data = sampleDf, formula = Target.x ~ NAME_EDUCATION_TYPE)
lm(data = sampleDf, formula = Target.x ~ NAME_EDUCATION_TYPE)
ctree(data = sampleDf, formula = TARGET.x ~ NAME_EDUCATION_TYPE)
sampleDf %>%
select(Target = TARGET.x, NAME_EDUCATION_TYPE)
sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE)
sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target))
sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target)) %>%
arrange(Mean)
sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target),
n = n()) %>%
arrange(Mean)
sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target),
n = n()) %>%
arrange(Mean) %>%
mutate(Order = row_number())
tstDf <- sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target),
n = n()) %>%
arrange(Mean) %>%
mutate(Order = row_number())
ctree(data = tstDf, formula = Target ~Order, ctree_control(maxdepth = 3))
tstDf <- sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target),
n = n()) %>%
arrange(Mean) %>%
mutate(Order = row_number())
ctree(data = tstDf, formula = Target ~ Order, ctree_control(maxdepth = 3))
tstDf <- sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
group_by(Var) %>%
summarise(Mean = mean(Target),
n = n()) %>%
arrange(Mean) %>%
mutate(Order = row_number()) %>%
select(Var, Order)
tstDf_2 <- sampleDf %>%
select(Target = TARGET.x, Var = NAME_EDUCATION_TYPE) %>%
left_join(tstDf, by = "Var")
tstDf_2
ctree(data = tstDf, formula = Target ~ Order, ctree_control(maxdepth = 3))
ctree(data = tstDf_2, formula = Target ~ Order, ctree_control(maxdepth = 3))
tstDf_2
tstDf_2$Target
tstDf_2$Order
ctree(data = tstDf_2, formula = Target ~ Order, control = ctree_control(maxdepth = 3))
ctree(data = tstDf_2 %>% head(20000), formula = Target ~ Order, control = ctree_control(maxdepth = 3))
tstDf_2$Order
ctree(data = tstDf_2 %>% head(20000), formula = Target ~ Order, control = ctree_control(maxdepth = 3))
tstDf_2$Order
tstDf
Inf + 1
Inf / Inf
Inf / (Inf - Inf)
Inf / 4
Inf - Inf
Inf + Inf
Inf ^ Inf
tstDf_2$Order
